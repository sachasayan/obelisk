
if (config.initPanel) {

  const createModeSelector = () => {
    return async () => {
      const { mode } = await prompts({
        name: 'mode',
        type: 'select',
        message: 'What would you like to do?',
        hint: 'Use tab or arrow keys and press enter to select.',
        choices: [
          { value: CliMode.Billboard, title:'🔤 => Billboard' },
          { value: CliMode.Pong, title:'🎾 => Pong' },
          { value: CliMode.Lightcycles, title:'🏍\s => Lightcycles' },
          { value: CliMode.Munchman, title:  '🟡 => Munchman' },
          { value: CliMode.Space, title: '🚀 => Space Adventure' },
          { value: CliMode.Pulse, title:'🕺 => Twinkle' },
          { value: CliMode.Exit, title: '🚪 => Exit' },
          { value: CliMode.Sunlight, title: '🟠 => Sunlight' },
          { value: CliMode.Test, title:  '(Test Mode)' },
        ],
      });
      return mode as CliMode;
    };
  };
  const chooseMode = createModeSelector();

  (async () => {
    try {
      matrix = new LedMatrix(matrixOptions, runtimeOptions);
      matrix.clear();

      while (true) {
        switch (await chooseMode()) {
          case CliMode.Billboard: {
            matrix.afterSync(() => {});
            Billboard.init(matrix);
            break;
          }
          case CliMode.Test: {
            matrix.afterSync(() => {});
            Test.init(matrix);
            break;
          }
          case CliMode.Munchman: {
            matrix.afterSync(() => {});
            Munchman.init(matrix);
            break;
          }
          case CliMode.Space: {
            matrix.afterSync(() => {});
            Space.init(matrix);
            break;
          }
          case CliMode.Sunlight: {
            matrix.afterSync(() => {});
            Sunlight.init(matrix);
            break;
          }
          case CliMode.Pulse: {
            matrix.afterSync(() => {});
            Pulse.init(matrix);
            break;
          }
          case CliMode.Pong: {
            matrix.afterSync(() => {});
            Pong.init(matrix, playerData);
            break;
          }
          case CliMode.Lightcycles: {
            matrix.afterSync(() => {});
            Lightcycles.init(matrix);
            break;
          }
          case CliMode.Exit: {
            matrix.afterSync(() => {});
            matrix.clear().sync();
            process.exit(0);
          }
        }
      }
    }
    catch (error) {
      console.error(`${__filename} caught: `, error);
    }
  })();

}